// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENTITY_ENTITYBUFFER_H_
#define FLATBUFFERS_GENERATED_ENTITY_ENTITYBUFFER_H_

#include "flatbuffers/flatbuffers.h"

namespace EntityBuffer {

struct Vec2;

struct TransformComponent;
struct TransformComponentBuilder;

struct PlayerComponent;
struct PlayerComponentBuilder;

struct AnimationComponent;
struct AnimationComponentBuilder;

struct Entity;
struct EntityBuilder;

enum Animation {
  Animation_default_ = 1,
  Animation_walking = 2,
  Animation_attack = 3,
  Animation_damaged = 4,
  Animation_falling = 5,
  Animation_MIN = Animation_default_,
  Animation_MAX = Animation_falling
};

inline const Animation (&EnumValuesAnimation())[5] {
  static const Animation values[] = {
    Animation_default_,
    Animation_walking,
    Animation_attack,
    Animation_damaged,
    Animation_falling
  };
  return values;
}

inline const char * const *EnumNamesAnimation() {
  static const char * const names[6] = {
    "default_",
    "walking",
    "attack",
    "damaged",
    "falling",
    nullptr
  };
  return names;
}

inline const char *EnumNameAnimation(Animation e) {
  if (flatbuffers::IsOutRange(e, Animation_default_, Animation_falling)) return "";
  const size_t index = static_cast<size_t>(e) - static_cast<size_t>(Animation_default_);
  return EnumNamesAnimation()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2() {
    memset(static_cast<void *>(this), 0, sizeof(Vec2));
  }
  Vec2(float _x, float _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 8);

struct TransformComponent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TransformComponentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POS = 4,
    VT_SIZE = 6
  };
  const EntityBuffer::Vec2 *pos() const {
    return GetStruct<const EntityBuffer::Vec2 *>(VT_POS);
  }
  const EntityBuffer::Vec2 *size() const {
    return GetStruct<const EntityBuffer::Vec2 *>(VT_SIZE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<EntityBuffer::Vec2>(verifier, VT_POS) &&
           VerifyField<EntityBuffer::Vec2>(verifier, VT_SIZE) &&
           verifier.EndTable();
  }
};

struct TransformComponentBuilder {
  typedef TransformComponent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const EntityBuffer::Vec2 *pos) {
    fbb_.AddStruct(TransformComponent::VT_POS, pos);
  }
  void add_size(const EntityBuffer::Vec2 *size) {
    fbb_.AddStruct(TransformComponent::VT_SIZE, size);
  }
  explicit TransformComponentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransformComponentBuilder &operator=(const TransformComponentBuilder &);
  flatbuffers::Offset<TransformComponent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TransformComponent>(end);
    return o;
  }
};

inline flatbuffers::Offset<TransformComponent> CreateTransformComponent(
    flatbuffers::FlatBufferBuilder &_fbb,
    const EntityBuffer::Vec2 *pos = 0,
    const EntityBuffer::Vec2 *size = 0) {
  TransformComponentBuilder builder_(_fbb);
  builder_.add_size(size);
  builder_.add_pos(pos);
  return builder_.Finish();
}

struct PlayerComponent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef PlayerComponentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HP = 4,
    VT_MANA = 6
  };
  int16_t hp() const {
    return GetField<int16_t>(VT_HP, 0);
  }
  int16_t mana() const {
    return GetField<int16_t>(VT_MANA, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_HP) &&
           VerifyField<int16_t>(verifier, VT_MANA) &&
           verifier.EndTable();
  }
};

struct PlayerComponentBuilder {
  typedef PlayerComponent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hp(int16_t hp) {
    fbb_.AddElement<int16_t>(PlayerComponent::VT_HP, hp, 0);
  }
  void add_mana(int16_t mana) {
    fbb_.AddElement<int16_t>(PlayerComponent::VT_MANA, mana, 0);
  }
  explicit PlayerComponentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PlayerComponentBuilder &operator=(const PlayerComponentBuilder &);
  flatbuffers::Offset<PlayerComponent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PlayerComponent>(end);
    return o;
  }
};

inline flatbuffers::Offset<PlayerComponent> CreatePlayerComponent(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t hp = 0,
    int16_t mana = 0) {
  PlayerComponentBuilder builder_(_fbb);
  builder_.add_mana(mana);
  builder_.add_hp(hp);
  return builder_.Finish();
}

struct AnimationComponent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnimationComponentBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANIM = 4
  };
  EntityBuffer::Animation anim() const {
    return static_cast<EntityBuffer::Animation>(GetField<int8_t>(VT_ANIM, 1));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_ANIM) &&
           verifier.EndTable();
  }
};

struct AnimationComponentBuilder {
  typedef AnimationComponent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_anim(EntityBuffer::Animation anim) {
    fbb_.AddElement<int8_t>(AnimationComponent::VT_ANIM, static_cast<int8_t>(anim), 1);
  }
  explicit AnimationComponentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnimationComponentBuilder &operator=(const AnimationComponentBuilder &);
  flatbuffers::Offset<AnimationComponent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AnimationComponent>(end);
    return o;
  }
};

inline flatbuffers::Offset<AnimationComponent> CreateAnimationComponent(
    flatbuffers::FlatBufferBuilder &_fbb,
    EntityBuffer::Animation anim = EntityBuffer::Animation_default_) {
  AnimationComponentBuilder builder_(_fbb);
  builder_.add_anim(anim);
  return builder_.Finish();
}

struct Entity FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EntityBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TRANSFORM = 6,
    VT_ANIMATION = 8
  };
  int16_t id() const {
    return GetField<int16_t>(VT_ID, 0);
  }
  const EntityBuffer::TransformComponent *transform() const {
    return GetPointer<const EntityBuffer::TransformComponent *>(VT_TRANSFORM);
  }
  const EntityBuffer::AnimationComponent *animation() const {
    return GetPointer<const EntityBuffer::AnimationComponent *>(VT_ANIMATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_TRANSFORM) &&
           verifier.VerifyTable(transform()) &&
           VerifyOffset(verifier, VT_ANIMATION) &&
           verifier.VerifyTable(animation()) &&
           verifier.EndTable();
  }
};

struct EntityBuilder {
  typedef Entity Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int16_t id) {
    fbb_.AddElement<int16_t>(Entity::VT_ID, id, 0);
  }
  void add_transform(flatbuffers::Offset<EntityBuffer::TransformComponent> transform) {
    fbb_.AddOffset(Entity::VT_TRANSFORM, transform);
  }
  void add_animation(flatbuffers::Offset<EntityBuffer::AnimationComponent> animation) {
    fbb_.AddOffset(Entity::VT_ANIMATION, animation);
  }
  explicit EntityBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EntityBuilder &operator=(const EntityBuilder &);
  flatbuffers::Offset<Entity> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Entity>(end);
    return o;
  }
};

inline flatbuffers::Offset<Entity> CreateEntity(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t id = 0,
    flatbuffers::Offset<EntityBuffer::TransformComponent> transform = 0,
    flatbuffers::Offset<EntityBuffer::AnimationComponent> animation = 0) {
  EntityBuilder builder_(_fbb);
  builder_.add_animation(animation);
  builder_.add_transform(transform);
  builder_.add_id(id);
  return builder_.Finish();
}

}  // namespace EntityBuffer

#endif  // FLATBUFFERS_GENERATED_ENTITY_ENTITYBUFFER_H_
